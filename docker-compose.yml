services:
  postgres-db:
    image: postgres:17.2-alpine3.21
    restart: always
    environment:
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - ./postgres-db-data:/var/lib/postgresql/data 700
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5


  authentication:
    image: authentication:latest
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./authentication
    environment:
      - POSTGRES_HOST=postgres-db
      - POSTGRES_PORT=5432
      - POSTGRES_DATABASE=postgres
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=postgres
      - APPLICATION_PORT=8080
    ports:
      - "8080"
    deploy:
      replicas: 1
    depends_on:
      postgres-db:
        condition: service_healthy
    volumes:
      - ./logs/authentication/:/var/log/authentication

  logger:
    image: logger:latest
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./logger
    environment:
      - APPLICATION_PORT=8020
      - KAFKA_SERVER=kafka
      - KAFKA_PORT=9092
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./logs/logger/:/var/log/logger

  book:
    image: book:latest
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./book
    environment:
      - POSTGRES_HOST=postgres-db
      - POSTGRES_PORT=5432
      - POSTGRES_DATABASE=postgres
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=postgres
      - APPLICATION_PORT=8060
      - KAFKA_SERVER=kafka
      - KAFKA_PORT=9092
      - JWT_ISSUER_URI=http://localhost:8080
      - JWK_SET_URI=http://host.docker.internal:4000/authentication/jwks
    ports:
      - "8060"
    deploy:
      mode: replicated
      replicas: 2
    depends_on:
      postgres-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./logs/book/:/var/log/book


  zookeeper:
    image: confluentinc/cp-zookeeper:5.1.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "22181:2181"

  kafka:
    image: confluentinc/cp-kafka:5.1.0
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 30000
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 30000
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.request.logger=WARN"
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      KAFKA_CREATE_TOPICS: "log-message:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    hostname: kafka
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 9092 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - book
      - logger
    ports:
      - "4000:4000"

